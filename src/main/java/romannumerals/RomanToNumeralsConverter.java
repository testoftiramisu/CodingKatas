package romannumerals;import java.util.HashMap;public class RomanToNumeralsConverter {    private HashMap<Character, Integer> romanToNumeralsMap;    private char[] duplicates = new char[]{'I', 'X', 'C'};    public RomanToNumeralsConverter() {        romanToNumeralsMap = new HashMap<Character, Integer>();        {            romanToNumeralsMap.put('I', 1);            romanToNumeralsMap.put('V', 5);            romanToNumeralsMap.put('X', 10);            romanToNumeralsMap.put('L', 50);            romanToNumeralsMap.put('C', 100);            romanToNumeralsMap.put('D', 500);            romanToNumeralsMap.put('M', 1000);        }    }    private void validateInput(char[] input) throws IllegalAccessException {        for (int i = input.length - 1; i >= 0; i--) {            for (char duplicate : duplicates) {                if ((i >= 3) && (duplicate == input[i]) &&                        (duplicate == input[i - 1]) &&                        (duplicate == input[i - 2]) &&                        (duplicate == input[i - 3])) {                    throw new IllegalArgumentException();                }            }        }    }    public int convert(String romanNumeral) throws IllegalAccessException {        int result = 0, previous = 0;        char[] characters = romanNumeral.toCharArray();        validateInput(characters);        for (int i = characters.length - 1; i >= 0; i--) {            int current = romanToNumeralsMap.get(characters[i]);            if (current >= previous) {                result += current;            } else {                result -= current;            }            previous = current;        }        return result;    }}